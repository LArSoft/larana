////////////////////////////////////////////////////////////////////////
// Class:       PIDAAnalyzer
// Module Type: analyzer
// File:        PIDAAnalyzer_module.cc
//
// Generated at Sat Nov  1 23:10:27 2014 by Wesley Ketchum using artmod
// from cetpkgsupport v1_07_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "PIDAAlg.h"

namespace pid{
  class PIDAAnalyzer;
}

class pid::PIDAAnalyzer : public art::EDAnalyzer {
public:
  explicit PIDAAnalyzer(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  PIDAAnalyzer(PIDAAnalyzer const &) = delete;
  PIDAAnalyzer(PIDAAnalyzer &&) = delete;
  PIDAAnalyzer & operator = (PIDAAnalyzer const &) = delete;
  PIDAAnalyzer & operator = (PIDAAnalyzer &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void reconfigure(fhicl::ParameterSet const & p) override;

private:

  std::vector<std::string> fCaloModuleLabels;
  PIDAAlg                  fPIDAAlg;

};


pid::PIDAAnalyzer::PIDAAnalyzer(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p),
  fCaloModuleLabels(p.get< std::vector<std::string> >("CaloModuleLabels")),
  fPIDAAlg(p.get<fhicl::ParameterSet>("PIDAAlg"))
{}

void pid::PIDAAnalyzer::analyze(art::Event const & e)
{
}

void pid::PIDAAnalyzer::reconfigure(fhicl::ParameterSet const & p)
{
  fCaloModuleLabels = p.get< std::vector<std::string> >("CaloModuleLabels");
  fPIDAAlg.reconfigure(p.get<fhicl::ParameterSet>("PIDAAlg"));
}

DEFINE_ART_MODULE(pid::PIDAAnalyzer)
