////////////////////////////////////////////////////////////////////////
// Class:       FlashHypothesisAna
// Module Type: analyzer
// File:        FlashHypothesisAna_module.cc
// Author:      Wes Ketchum
// 
// Description: Module that compares a reconstructed flash (from optical
//              system) with a flash hypothesis based on the track.
// Input:       recob::OpFlash, recob::Track
//
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "art/Framework/Services/Optional/TFileService.h"

#include <memory>

#include "BeamFlashTrackMatchTaggerAlg.h"

namespace cosmic {
  class FlashHypothesisAna;
}

class cosmic::FlashHypothesisAna : public art::EDAnalyzer {
public:
  explicit FlashHypothesisAna(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  FlashHypothesisAna(FlashHypothesisAna const &) = delete;
  FlashHypothesisAna(FlashHypothesisAna &&) = delete;
  FlashHypothesisAna & operator = (FlashHypothesisAna const &) = delete;
  FlashHypothesisAna & operator = (FlashHypothesisAna &&) = delete;
  void reconfigure(fhicl::ParameterSet const& p);
  void beginJob() override;
  void analyze(art::Event const& e) override;


private:

  // Declare member data here.
  BeamFlashTrackMatchTaggerAlg fAlg;
  std::string fTrackModuleLabel;
  std::string fFlashModuleLabel;
  
};


cosmic::FlashHypothesisAna::FlashHypothesisAna(fhicl::ParameterSet const & p)
  : EDAnalyzer(p),
    fAlg(p.get<fhicl::ParameterSet>("BeamFlashTrackMatchAlgParams")),
    fTrackModuleLabel(p.get<std::string>("TrackModuleLabel")),
    fFlashModuleLabel(p.get<std::string>("FlashModuleLabel"))
{}

void cosmic::FlashHypothesisAna::reconfigure(fhicl::ParameterSet const& p){
  fhicl::ParameterSet alg_params = p.get<fhicl::ParameterSet>("BeamFlashTrackMatchAlgParams");
  fAlg.reconfigure(alg_params);

  fTrackModuleLabel = p.get<std::string>("TrackModuleLabel");   
  fFlashModuleLabel = p.get<std::string>("FlashModuleLabel");
}

void cosmic::FlashHypothesisAna::beginJob(){
  art::ServiceHandle<art::TFileService> tfs;  
  fAlg.SetHypothesisComparisonTree(tfs->make<TTree>("hc_tree", "HypothesisComparisonTree"),
				   tfs->make<TH1F>("opdet_hist_flash","Optical Detector Occupancy, Flash",30,0,30),
				   tfs->make<TH1F>("opdet_hist_hyp","Optical Detector Occupancy, Hyp",30,0,30));
}

void cosmic::FlashHypothesisAna::analyze(art::Event const& evt)
{
  //services we'll be using
  art::ServiceHandle<geo::Geometry> geomHandle;
  geo::Geometry const& geom(*geomHandle);
  art::ServiceHandle<phot::PhotonVisibilityService> pvsHandle;
  phot::PhotonVisibilityService const& pvs(*pvsHandle);
  art::ServiceHandle<util::LArProperties> larpHandle;
  util::LArProperties const& larp(*larpHandle);
  art::ServiceHandle<opdet::OpDigiProperties> opdigipHandle;
  opdet::OpDigiProperties const& opdigip(*opdigipHandle);

  //Get Flashes from event.
  art::Handle< std::vector<recob::OpFlash> > flashHandle;
  evt.getByLabel(fFlashModuleLabel, flashHandle);
  std::vector<recob::OpFlash> const& flashVector(*flashHandle);


  //Get Tracks from event.
  art::Handle< std::vector<recob::Track> > trackHandle;
  evt.getByLabel(fTrackModuleLabel, trackHandle);
  std::vector<recob::Track> const& trackVector(*trackHandle);
  
  fAlg.RunHypothesisComparison(evt.run(),
			       evt.event(),
			       flashVector, trackVector, 
			       geom, pvs, larp, opdigip);
}

DEFINE_ART_MODULE(cosmic::FlashHypothesisAna)
