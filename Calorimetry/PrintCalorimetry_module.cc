////////////////////////////////////////////////////////////////////////
// Class:       PrintCalorimetry
// Module Type: analyzer
// File:        PrintCalorimetry_module.cc
//
// Generated at Wed Oct 29 10:26:38 2014 by Wesley Ketchum using artmod
// from cetpkgsupport v1_07_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"


namespace calo{
  class PrintCalorimetry;
}

class calo::PrintCalorimetry : public art::EDAnalyzer {
public:
  explicit PrintCalorimetry(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  PrintCalorimetry(PrintCalorimetry const &) = delete;
  PrintCalorimetry(PrintCalorimetry &&) = delete;
  PrintCalorimetry & operator = (PrintCalorimetry const &) = delete;
  PrintCalorimetry & operator = (PrintCalorimetry &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;

  // Selected optional functions.
  void reconfigure(fhicl::ParameterSet const & p) override;

private:

  std::string              fTrackModuleLabel;
  std::vector<std::string> fCaloModuleLabels;

};


calo::PrintCalorimetry::PrintCalorimetry(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)  // ,
 // More initializers here.
{}

void calo::PrintCalorimetry::analyze(art::Event const & e)
{
  // Implementation of required member function here.
}

void calo::PrintCalorimetry::reconfigure(fhicl::ParameterSet const & p)
{
  // Implementation of optional member function here.
}

DEFINE_ART_MODULE(calo::PrintCalorimetry)
